// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_clone_sizes_Cpp
std::vector<NumericVector> get_clone_sizes_Cpp(StringVector barcodes, NumericVector clusters, StringVector clonotype_ids, int num_clusters, double scale_factor);
RcppExport SEXP _scballpack_get_clone_sizes_Cpp(SEXP barcodesSEXP, SEXP clustersSEXP, SEXP clonotype_idsSEXP, SEXP num_clustersSEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type barcodes(barcodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< StringVector >::type clonotype_ids(clonotype_idsSEXP);
    Rcpp::traits::input_parameter< int >::type num_clusters(num_clustersSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_clone_sizes_Cpp(barcodes, clusters, clonotype_ids, num_clusters, scale_factor));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scballpack_get_clone_sizes_Cpp", (DL_FUNC) &_scballpack_get_clone_sizes_Cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_scballpack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
